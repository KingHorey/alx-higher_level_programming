>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> try:
...     matrix_mul(((12, 4), (9, 12)), [[1, 3], [5, 6]])
... except Exception as e:
...     print(e)
m_a must be a list

>>> try:
...     matrix_mul([[2, 4], [7, 7]], ((0, 8), (10, 4)))
... except Exception as e:
...     print(e)
m_b must be a list

>>> try:
...     matrix_mul([[10, 5], (5, 4)], [[12, 3], [2, 7]])
... except Exception as e:
...     print(e)
m_a must be a list of lists

>>> try:
...     matrix_mul([[12, 4], [6, 7]], [(13, 99), [4, 78]])
... except Exception as e:
...     print(e)
m_b must be a list of lists

>>> try:
...     matrix_mul([[]], [[1, 3], [5, 6]])
... except Exception as e:
...     print(e)
m_a can't be empty

>>> try:
...     matrix_mul([[2, 3], [5, 6]], [[]])
... except Exception as e:
...     print(e)
m_b can't be empty

>>> try:
...     matrix_mul([[1, "s"], [1, 8]], [[1, 4], [7, 10]])
... except Exception as e:
...     print(e)
m_a should contain only integers or floats

>>> try:
... 	matrix_mul([[1, 3, 4], [1, 3]], [[1, 3], [5, 6]])
... except Exception as e:
...	print(e)
each row of m_a must be of the same size

>>> try:
...     matrix_mul([[1, 3], [1, 3]], [[1, 3, 6], [5, 6]])
... except Exception as e:
...     print(e)
each row of m_b must be of the same size

>>> try:
... 	matrix_mul([[1, 4, 5], [1, 3, 9]], [[1, 3], [6, 7]])
... except Exception as e:
... 	print(e)
m_a and m_b can't be multiplied

>>> try:
... 	matrix_mul()
... except Exception as e:
... 	print(e)
matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> try:
... 	matrix_mul([[1, 3], [4, 5]], )
... except Exception as e:
...	print(e)
matrix_mul() missing 1 required positional argument: 'm_b'

>>> matrix_mul([[2.1, 2.4], [1.1, 1.3]], [[4.6, 9.6], [2.3, 4.6]])
[[15.18, 31.2], [8.049999999999999, 16.54]]

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]
